# Machine Learning
This details walks through the setup of a machine learning project from installation of essential tools 
to creating a clean and efficient environment for machine learning development.

---

# Homebrew - The Missing Package Manager for macOS (or Linux)
Homebrew simplifies the installation of software on macOS and Linux. 
Use it to install development tools and packages.

1. Install Homebrew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

2. Set up Homebrew in your shell
(echo; echo 'eval "$(/usr/local/bin/brew shellenv)"') >> ~/.zprofile
eval "$(/usr/local/bin/brew shellenv)"

3. Install a package
Install essential packages like Git, Pyenv, and Python.
brew install <package-name>

4. List installed packages
View all installed packages using the following:
brew list

---

# Pyenv - Python Version Management
Manage multiple Python versions easily with Pyenv.

1. Install Pyenv 
brew install pyenv

2. Configure Pyenv
Add Pyenv to your shell profile for automatic configuration.
echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.zshrc
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.zshrc
echo 'eval "$(pyenv init --path)"' >> ~/.zshrc
echo 'eval "$(pyenv init -)"' >> ~/.zshrc

3. Install Python Versions
You can install different Python versions, such as:
pyenv install 3.12.4
pyenv install 3.11.9
pyenv install 3.9.19

4. Set Global or Local Python Version
Set a global version for the system:
pyenv global 3.11.9

Set a local Python version in a project:
cd your_project_directory
pyenv local 3.9.19

5. Uninstall a Python Version
pyenv uninstall 3.9.19

---

# ML Algorithms Project - Regression, Classification and Clustering

1. Set up 'Machine Learning' project
mkdir machine-learning
cd machine-learning
code .

---

# Virtual Environments - Isolated Python Environments
Always use virtual environments to keep dependencies isolated.

1. Create a Virtual Environment
python -m venv ml-env

2. Activate the Virtual Environment (macOS)
source ml-env/bin/activate

---

# Git - Version Control
Git helps you track changes and collaborate with others.

1. Install Git
brew install git

2. Configure Git
Set your Git username, email, and default branch:
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --global init.defaultBranch main
git config --global --list

3. Initialize a Git Repository
git init
touch .gitignore
git status

---

# SSH Keys for GitHub/GitLab
Generate and use SSH keys to authenticate with GitHub or GitLab.

1. Generate SSH Key
ssh-keygen -t ed25519 -C "your_email@example.com"

2. Add SSH Key to your GitHub/GitLab account
pbcopy < ~/.ssh/id_ed25519.pub

3. Test SSH connection
ssh -T git@github.com       
ssh -T git@gitlab.com

4. Push to GitHub/GitLab
git add .
git commit -m "ðŸŽ‰ Initial commit"
git remote add origin git@github.com:rizwan-ai/machine-learning.git
git push -u origin main

---

# README.md - Project Documentation
A good `README.md` file makes your project more accessible to collaborators.

1. Create the README.md file
touch README.md

2. Add content to README.md
echo "# Machine Learning" >> README.md

3. Add README.md to the staging area
git add README.md

4. Commit the changes with an Documentation ðŸ“š Emoji
git commit -m ":books: Add initial README file"

5. Push to the remote repository
git push -u origin main

---

# Python Packages - Installing ML Libraries

1. To update 'pip' to the latest version
pip install --upgrade pip

2. Essential machine learning libraries to install
pip install numpy pandas scikit-learn matplotlib seaborn plotly xgboost catboost lightgbm

--- 

